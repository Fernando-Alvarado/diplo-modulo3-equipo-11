plot.title = element_text(face = "bold"),
axis.text.x = element_text(face = "bold")
)
# Mostramos la tabla final
knitr::kable(duracion_posicion, caption = "Duración promedio de la carrera según posición")
# Unimos la tabla de bateo con la tabla escuelasJugadores
# Esto nos permite saber qué jugadores asistieron a alguna universidad
bateo_universidad <- bateo |>
inner_join(escuelasJugadores, by = "playerID") |>
filter(!is.na(AB), AB > 0) |>  # Nos aseguramos de no dividir entre cero
mutate(avg_bateo = H / AB) |>  # Calculamos el promedio de bateo
mutate(asistio_uni = TRUE) |>  # Etiquetamos a quienes sí asistieron
select(playerID, yearID, avg_bateo, asistio_uni)
colnames(bateo)
head(escuelasJugadores)
nrow(escuelasJugadores)
bateo |>
count(playerID) |>
arrange(desc(n))
bateo |>
distinct(playerID, yearID) |>
count(playerID)
# Cargar librerías necesarias
library(dplyr)
# Verificar nombres de columnas en la tabla 'bateo'
cat("Columnas en bateo:\n")
print(colnames(bateo))
# Vista previa y tamaño de 'escuelasJugadores'
cat("\nVista previa de escuelasJugadores:\n")
print(head(escuelasJugadores))
cat("\nNúmero de registros en escuelasJugadores:\n")
print(nrow(escuelasJugadores))
# Revisar si playerID se repite en bateo (más de un año por jugador)
cat("\nNúmero de años por jugador en bateo:\n")
bateo |>
count(playerID) |>
arrange(desc(n)) |>
head(10) |>
print()
# Revisar posibles duplicados por jugador y año
cat("\nNúmero de combinaciones únicas playerID - yearID:\n")
print(nrow(bateo |> distinct(playerID, yearID)))
cat("\nNúmero total de registros en bateo:\n")
print(nrow(bateo))
# Verificar que las librerías estén cargadas correctamente
cat("\nLibrerías cargadas:\n")
print(sessionInfo())
# Cargar librerías necesarias
library(dplyr)
# Verificar nombres de columnas en la tabla 'bateo'
cat("Columnas en bateo:\n")
print(colnames(bateo))
# Vista previa y tamaño de 'escuelasJugadores'
cat("\nVista previa de escuelasJugadores:\n")
print(head(escuelasJugadores))
cat("\nNúmero de registros en escuelasJugadores:\n")
print(nrow(escuelasJugadores))
# Revisar si playerID se repite en bateo (más de un año por jugador)
cat("\nNúmero de años por jugador en bateo:\n")
bateo |>
count(playerID) |>
arrange(desc(n)) |>
head(10) |>
print()
# Revisar posibles duplicados por jugador y año
cat("\nNúmero de combinaciones únicas playerID - yearID:\n")
print(nrow(bateo |> distinct(playerID, yearID)))
cat("\nNúmero total de registros en bateo:\n")
print(nrow(bateo))
# Verificar que las librerías estén cargadas correctamente
cat("\nLibrerías cargadas:\n")
print(sessionInfo())
# Unimos la tabla de bateo con escuelasJugadores para saber qué jugadores fueron a la universidad
bateo_universidad <- bateo |>
left_join(
escuelasJugadores |> distinct(playerID) |> mutate(asistio_uni = TRUE),
by = "playerID"
) |>
mutate(asistio_uni = ifelse(is.na(asistio_uni), FALSE, TRUE))
# Calculamos el promedio de bateo (BA = H / AB) para cada jugador
promedios_jugador <- bateo_universidad |>
group_by(playerID, asistio_uni) |>
summarise(
H = sum(H, na.rm = TRUE),
AB = sum(AB, na.rm = TRUE),
promedio_bateo = ifelse(AB > 0, H / AB, NA_real_),
.groups = "drop"
) |>
filter(!is.na(promedio_bateo))
# Resumen de estadísticas por grupo
resumen_bateo <- promedios_jugador |>
group_by(asistio_uni) |>
summarise(
promedio_general = mean(promedio_bateo),
mediana = median(promedio_bateo),
sd = sd(promedio_bateo),
n = n()
)
# Mostramos la tabla resumen
resumen_bateo |> knitr::kable(caption = "Promedio de bateo por grupo")
# Visualización comparativa
ggplot(promedios_jugador, aes(x = as.factor(asistio_uni), y = promedio_bateo, fill = as.factor(asistio_uni))) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Comparación del promedio de bateo",
subtitle = "Según asistencia universitaria",
x = "¿Asistió a la universidad?",
y = "Promedio de bateo",
fill = "Asistencia"
) +
scale_fill_manual(values = c("#999999", "#66CC66"), labels = c("No", "Sí")) +
scale_x_discrete(labels = c("No", "Sí")) +
theme_minimal(base_size = 13) +
theme(plot.title = element_text(face = "bold"))
# Unimos la tabla de bateo con escuelasJugadores para saber qué jugadores fueron a la universidad
bateo_universidad <- bateo |>
left_join(
escuelasJugadores |> distinct(playerID) |> mutate(asistio_uni = TRUE),
by = "playerID"
) |>
mutate(asistio_uni = ifelse(is.na(asistio_uni), FALSE, TRUE))
# Calculamos el promedio de bateo (BA = H / AB) para cada jugador
promedios_jugador <- bateo_universidad |>
group_by(playerID, asistio_uni) |>
summarise(
H = sum(H, na.rm = TRUE),
AB = sum(AB, na.rm = TRUE),
promedio_bateo = ifelse(AB > 0, H / AB, NA_real_),
.groups = "drop"
) |>
filter(!is.na(promedio_bateo))
# Resumen de estadísticas por grupo
resumen_bateo <- promedios_jugador |>
group_by(asistio_uni) |>
summarise(
promedio_general = mean(promedio_bateo),
mediana = median(promedio_bateo),
sd = sd(promedio_bateo),
n = n()
)
# Visualización comparativa
ggplot(promedios_jugador, aes(x = as.factor(asistio_uni), y = promedio_bateo, fill = as.factor(asistio_uni))) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Comparación del promedio de bateo",
subtitle = "Según asistencia universitaria",
x = "¿Asistió a la universidad?",
y = "Promedio de bateo",
fill = "Asistencia"
) +
scale_fill_manual(values = c("#999999", "#66CC66"), labels = c("No", "Sí")) +
scale_x_discrete(labels = c("No", "Sí")) +
theme_minimal(base_size = 13) +
theme(plot.title = element_text(face = "bold"))
# Mostramos la tabla resumen
resumen_bateo |> knitr::kable(caption = "Promedio de bateo por grupo")
# Unimos la duración de la carrera (calculada previamente) con la información salarial
# Esto nos permitirá relacionar cuánto duró su carrera con cuánto ganaron
salario_duracion <- carrera_jugadores |>
inner_join(salarios, by = "playerID") |>
group_by(playerID, duracion) |>
summarise(
salario_total = sum(salary, na.rm = TRUE),         # Suma total de salarios por jugador
salario_promedio = mean(salary, na.rm = TRUE),     # Promedio salarial anual
.groups = "drop"
)
# Visualizamos si hay una relación entre la duración de la carrera y el salario total acumulado
ggplot(salario_duracion, aes(x = duracion, y = salario_total)) +
geom_point(alpha = 0.4, size = 2, color = "#2C7BB6") +     # Puntos con transparencia
geom_smooth(method = "lm", se = FALSE, color = "#D7191C") + # Línea de tendencia (modelo lineal)
labs(
title = "Relación entre duración de la carrera y salario total",
subtitle = "Jugadores de béisbol con información salarial disponible",
x = "Duración de la carrera (años)",
y = "Salario total acumulado (USD)"
) +
theme_minimal(base_size = 13)
# Calculamos la correlación entre los años de carrera y el salario acumulado
# Esto nos dirá si existe una asociación lineal entre ambas variables
cor.test(salario_duracion$duracion, salario_duracion$salario_total, method = "pearson")
# Ver las primeras filas de la tabla de escuelas
cat("Vista previa de la tabla 'escuelas':\n")
print(head(escuelas))
# Ver los nombres de columnas en la tabla 'escuelas'
cat("\nColumnas disponibles en 'escuelas':\n")
print(colnames(escuelas))
# Ver las primeras filas de la tabla 'escuelasJugadores'
cat("\nVista previa de la tabla 'escuelasJugadores':\n")
print(head(escuelasJugadores))
# Ver cuántas universidades únicas hay
cat("\nNúmero de universidades únicas:\n")
print(length(unique(escuelas$schoolID)))
# Ver cuántos jugadores tienen asociada alguna escuela
cat("\nNúmero de jugadores con al menos una escuela registrada:\n")
print(length(unique(escuelasJugadores$playerID)))
# Ver las primeras filas de la tabla de escuelas
cat("Vista previa de la tabla 'escuelas':\n")
print(head(escuelas))
# Ver los nombres de columnas en la tabla 'escuelas'
cat("\nColumnas disponibles en 'escuelas':\n")
print(colnames(escuelas))
# Ver las primeras filas de la tabla 'escuelasJugadores'
cat("\nVista previa de la tabla 'escuelasJugadores':\n")
print(head(escuelasJugadores))
# Ver cuántas universidades únicas hay
cat("\nNúmero de universidades únicas:\n")
print(length(unique(escuelas$schoolID)))
# Ver cuántos jugadores tienen asociada alguna escuela
cat("\nNúmero de jugadores con al menos una escuela registrada:\n")
print(length(unique(escuelasJugadores$playerID)))
# Unimos bateo con escuelasJugadores para saber qué jugador asistió a qué escuela
bateo_escuelas <- bateo |>
inner_join(escuelasJugadores, by = "playerID")
# Calculamos el promedio de bateo por jugador
promedios_jugadores <- bateo_escuelas |>
group_by(playerID, schoolID) |>
summarise(
H = sum(H, na.rm = TRUE),
AB = sum(AB, na.rm = TRUE),
promedio_bateo = ifelse(AB > 0, H / AB, NA_real_),
.groups = "drop"
) |>
filter(!is.na(promedio_bateo))
# Seleccionamos las universidades con al menos 30 jugadores
universidades_filtradas <- promedios_jugadores |>
count(schoolID) |>
filter(n >= 30) |>
pull(schoolID)
# Filtramos y analizamos solo estas universidades
comparacion_uni <- promedios_jugadores |>
filter(schoolID %in% universidades_filtradas)
# Gráfico de comparación
ggplot(comparacion_uni, aes(x = reorder(schoolID, promedio_bateo, FUN = median), y = promedio_bateo)) +
geom_boxplot(fill = "#69b3a2") +
labs(
title = "Distribución del promedio de bateo por universidad",
subtitle = "Universidades con al menos 30 jugadores en la base de datos",
x = "Universidad (ID)",
y = "Promedio de bateo"
) +
theme_minimal(base_size = 12) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold")
)
# Prueba ANOVA para diferencias significativas entre universidades
anova_uni <- aov(promedio_bateo ~ schoolID, data = comparacion_uni)
summary(anova_uni)
cat("Columnas de la tabla 'nombres':\n")
print(colnames(nombres))
cat("\nVista previa de 'nombres':\n")
print(head(nombres))
cat("Columnas de la tabla 'nombres':\n")
print(colnames(nombres))
cat("\nVista previa de 'nombres':\n")
print(head(nombres))
# Calculamos el promedio de bateo por jugador
promedios_bateo <- bateo |>
group_by(playerID) |>
summarise(
H = sum(H, na.rm = TRUE),
AB = sum(AB, na.rm = TRUE),
promedio_bateo = ifelse(AB > 0, H / AB, NA_real_),
.groups = "drop"
) |>
filter(!is.na(promedio_bateo))
# Unimos con la tabla que contiene altura y peso
bateo_fisico <- promedios_bateo |>
inner_join(nombres |> select(playerID, height, weight), by = "playerID") |>
filter(!is.na(height), !is.na(weight))
# Relación entre altura y promedio de bateo
ggplot(bateo_fisico, aes(x = height, y = promedio_bateo)) +
geom_point(alpha = 0.4, color = "steelblue") +
geom_smooth(method = "lm", se = FALSE, color = "darkred") +
labs(
title = "Relación entre altura y promedio de bateo",
x = "Altura (pulgadas)",
y = "Promedio de bateo"
) +
theme_minimal()
# Relación entre peso y promedio de bateo
ggplot(bateo_fisico, aes(x = weight, y = promedio_bateo)) +
geom_point(alpha = 0.4, color = "darkgreen") +
geom_smooth(method = "lm", se = FALSE, color = "darkorange") +
labs(
title = "Relación entre peso y promedio de bateo",
x = "Peso (libras)",
y = "Promedio de bateo"
) +
theme_minimal()
# Correlaciones
cor.test(bateo_fisico$height, bateo_fisico$promedio_bateo)
cor.test(bateo_fisico$weight, bateo_fisico$promedio_bateo)
colnames(salarios)
# Esperado:
# "playerID" "yearID" "teamID" "lgID" "salary"
# Agrupamos los datos por año y calculamos la media salarial por año
salarios_por_anio <- salarios |>
group_by(yearID) |>
summarise(
salario_promedio = mean(salary, na.rm = TRUE),
jugadores = n()
) |>
filter(yearID >= max(yearID) - 50) # Limitamos a los últimos 50 años
# Visualizamos la tendencia de los salarios promedio
ggplot(salarios_por_anio, aes(x = yearID, y = salario_promedio)) +
geom_line(color = "#1f78b4", size = 1.2) +
geom_smooth(method = "lm", se = FALSE, color = "red", linewidth = 1) +
scale_y_continuous(labels = scales::dollar_format()) +
labs(
title = "Tendencia de los salarios promedio en la MLB",
subtitle = "Últimos 50 años según datos disponibles",
x = "Año",
y = "Salario promedio (USD)"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(face = "bold"),
axis.text.x = element_text(angle = 45, hjust = 1)
)
# Creamos una variable binaria indicando si un jugador asistió a la universidad
jugadores_uni <- escuelasJugadores |>
distinct(playerID) |>
mutate(asistio_uni = TRUE)
# Unimos la información de salarios con la de asistencia universitaria
salarios_educacion <- salarios |>
left_join(jugadores_uni, by = "playerID") |>
mutate(asistio_uni = ifelse(is.na(asistio_uni), FALSE, TRUE))
# Calculamos salario total y promedio por jugador
salarios_por_jugador <- salarios_educacion |>
group_by(playerID, asistio_uni) |>
summarise(
salario_total = sum(salary, na.rm = TRUE),
salario_promedio = mean(salary, na.rm = TRUE),
.groups = "drop"
)
# Creamos un resumen estadístico por grupo
resumen_salarios <- salarios_por_jugador |>
group_by(asistio_uni) |>
summarise(
salario_prom_medio = mean(salario_promedio),
salario_prom_mediana = median(salario_promedio),
sd = sd(salario_promedio),
n = n()
)
# Mostramos la tabla resumen
knitr::kable(resumen_salarios, caption = "Resumen de salarios promedio según antecedentes educativos")
# Visualización con boxplot
ggplot(salarios_por_jugador, aes(x = as.factor(asistio_uni), y = salario_promedio, fill = as.factor(asistio_uni))) +
geom_boxplot(alpha = 0.7) +
scale_y_continuous(labels = scales::dollar_format()) +
scale_fill_manual(values = c("#999999", "#66CC66"), labels = c("No", "Sí")) +
scale_x_discrete(labels = c("No", "Sí")) +
labs(
title = "Comparación del salario promedio anual",
subtitle = "Según antecedentes educativos (asistencia universitaria)",
x = "¿Asistió a la universidad?",
y = "Salario promedio anual (USD)",
fill = "Asistencia"
) +
theme_minimal(base_size = 13) +
theme(plot.title = element_text(face = "bold"))
# Creamos una variable binaria indicando si un jugador asistió a la universidad
jugadores_uni <- escuelasJugadores |>
distinct(playerID) |>
mutate(asistio_uni = TRUE)
# Unimos la información de salarios con la de asistencia universitaria
salarios_educacion <- salarios |>
left_join(jugadores_uni, by = "playerID") |>
mutate(asistio_uni = ifelse(is.na(asistio_uni), FALSE, TRUE))
# Calculamos salario total y promedio por jugador
salarios_por_jugador <- salarios_educacion |>
group_by(playerID, asistio_uni) |>
summarise(
salario_total = sum(salary, na.rm = TRUE),
salario_promedio = mean(salary, na.rm = TRUE),
.groups = "drop"
)
# Creamos un resumen estadístico por grupo
resumen_salarios <- salarios_por_jugador |>
group_by(asistio_uni) |>
summarise(
salario_prom_medio = mean(salario_promedio),
salario_prom_mediana = median(salario_promedio),
sd = sd(salario_promedio),
n = n()
)
# Mostramos la tabla resumen
knitr::kable(resumen_salarios, caption = "Resumen de salarios promedio según antecedentes educativos")
# Visualización con boxplot
ggplot(salarios_por_jugador, aes(x = as.factor(asistio_uni), y = salario_promedio, fill = as.factor(asistio_uni))) +
geom_boxplot(alpha = 0.7) +
scale_y_continuous(labels = scales::dollar_format()) +
scale_fill_manual(values = c("#999999", "#66CC66"), labels = c("No", "Sí")) +
scale_x_discrete(labels = c("No", "Sí")) +
labs(
title = "Comparación del salario promedio anual",
subtitle = "Según antecedentes educativos (asistencia universitaria)",
x = "¿Asistió a la universidad?",
y = "Salario promedio anual (USD)",
fill = "Asistencia"
) +
theme_minimal(base_size = 13) +
theme(plot.title = element_text(face = "bold"))
wilcox.test(salario_promedio ~ asistio_uni, data = salarios_uni)
# Generamos el dataset con salario promedio anual por jugador
salarios_uni <- salarios |>
left_join(
escuelasJugadores |> distinct(playerID) |> mutate(asistio_uni = TRUE),
by = "playerID"
) |>
mutate(asistio_uni = ifelse(is.na(asistio_uni), FALSE, TRUE)) |>
group_by(playerID, asistio_uni) |>
summarise(
salario_promedio = mean(salary, na.rm = TRUE),
.groups = "drop"
) |>
filter(!is.na(salario_promedio))
# Aplicamos la prueba de Wilcoxon
wilcox.test(salario_promedio ~ asistio_uni, data = salarios_uni)
# Generamos el dataset con salario promedio anual por jugador
salarios_uni <- salarios |>
left_join(
escuelasJugadores |> distinct(playerID) |> mutate(asistio_uni = TRUE),
by = "playerID"
) |>
mutate(asistio_uni = ifelse(is.na(asistio_uni), FALSE, TRUE)) |>
group_by(playerID, asistio_uni) |>
summarise(
salario_promedio = mean(salary, na.rm = TRUE),
.groups = "drop"
) |>
filter(!is.na(salario_promedio))
# Aplicamos la prueba de Wilcoxon
wilcox.test(salario_promedio ~ asistio_uni, data = datos)
# Agrupar los salarios promedio por año
salarios_por_anio <- salarios |>
group_by(yearID) |>
summarise(salario_promedio = mean(salary, na.rm = TRUE))
# Prueba de correlación de Pearson
cor.test(salarios_por_anio$yearID, salarios_por_anio$salario_promedio, method = "pearson")
wilcox.test(salario_promedio ~ asistio_uni, data = salarios_por_jugador)
# Creamos una variable binaria indicando si un jugador asistió a la universidad
jugadores_uni <- escuelasJugadores |>
distinct(playerID) |>
mutate(asistio_uni = TRUE)
# Unimos la información de salarios con la de asistencia universitaria
salarios_educacion <- salarios |>
left_join(jugadores_uni, by = "playerID") |>
mutate(asistio_uni = ifelse(is.na(asistio_uni), FALSE, TRUE))
# Calculamos salario total y promedio por jugador
salarios_por_jugador <- salarios_educacion |>
group_by(playerID, asistio_uni) |>
summarise(
salario_total = sum(salary, na.rm = TRUE),
salario_promedio = mean(salary, na.rm = TRUE),
.groups = "drop"
)
# Creamos un resumen estadístico por grupo
resumen_salarios <- salarios_por_jugador |>
group_by(asistio_uni) |>
summarise(
salario_prom_medio = mean(salario_promedio),
salario_prom_mediana = median(salario_promedio),
sd = sd(salario_promedio),
n = n()
)
# Mostramos la tabla resumen
knitr::kable(resumen_salarios, caption = "Resumen de salarios promedio según antecedentes educativos")
# Visualización con boxplot
ggplot(salarios_por_jugador, aes(x = as.factor(asistio_uni), y = salario_promedio, fill = as.factor(asistio_uni))) +
geom_boxplot(alpha = 0.7) +
scale_y_continuous(labels = scales::dollar_format()) +
scale_fill_manual(values = c("#999999", "#66CC66"), labels = c("No", "Sí")) +
scale_x_discrete(labels = c("No", "Sí")) +
labs(
title = "Comparación del salario promedio anual",
subtitle = "Según antecedentes educativos (asistencia universitaria)",
x = "¿Asistió a la universidad?",
y = "Salario promedio anual (USD)",
fill = "Asistencia"
) +
theme_minimal(base_size = 13) +
theme(plot.title = element_text(face = "bold"))
# Empezamos limpiando nuestro ambiente
# Configuración global de los bloques de código (chunk's)
knitr::opts_chunk$set(
echo = FALSE,
fig.align = "center",
fig.dim = c(5.0, 4.0),
fig.pos = "H",
# Agregamos configuraciones para evitar mensajes de advertencias y de errores en el archivo
message = FALSE,
warning = FALSE,
error = F
)
# Librerias a usar en este proyecto
library(dplyr)
library(readr)
library(ggplot2)
library(countrycode)
library(naniar)
library(esquisse)
library(knitr)   #Libreria para hacer tabalas mas bonitas
library(patchwork) #Orden de las librerias
library(DBI)
library(dbplyr)
library(RSQLite)
library(visdat) #Ver datos faltantes en un df
library(lubridate)
# Rutas que vamos a trabajar, cada quien tendra una ruta diferente
setwd("C:/Users/ferna/Documents/Proyectos_Diplomado/diplo-modulo2-equipo-11/Data")
